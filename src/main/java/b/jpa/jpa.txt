JPA (java persistence api) - модуль упрощает процесс создания приложений которые работают с базой
данных, маппит сущности (объекты) в соответствующие им таблицы.

Spring Data JPA под капотом использует Hibernate, а Hibernate под капотом использует JDBC API


В Spring, аннотация @Transactional используется для объявления границ транзакций.
Она управляет тем, как и когда должны начинаться, коммититься или откатываться транзакции.

Одним из ключевых аспектов управления транзакциями является распространение (propagation),
которое определяет поведение транзакции при вызове метода из другого метода, уже находящегося в транзакции.

@Transactional(propagation = Propagation.REQUIRED)
public void someMethod() {
    // your code
}

Основные из них:

1) REQUIRED (по умолчанию):
Если текущая транзакция существует, метод будет выполняться в рамках этой транзакции. Если текущей транзакции нет, будет создана новая.
2) REQUIRES_NEW:
Всегда создается новая транзакция. Если текущая транзакция существует, она будет приостановлена до завершения новой транзакции.
3) SUPPORTS:
Если текущая транзакция существует, метод будет выполняться в рамках этой транзакции. Если текущей транзакции нет, метод будет выполняться вне транзакции.
4) NOT_SUPPORTED:
Метод всегда выполняется вне транзакции. Если текущая транзакция существует, она будет приостановлена.
5) MANDATORY:
Метод должен выполняться в рамках существующей транзакции. Если текущей транзакции нет, будет выброшено исключение.
6) NEVER:
Метод не должен выполняться в рамках транзакции. Если текущая транзакция существует, будет выброшено исключение.
7) NESTED:
Метод выполняется в рамках новой вложенной транзакции, если текущая транзакция существует.
Если текущей транзакции нет, это эквивалентно REQUIRED.


Если аннотация @Transactional не используется, то методы будут выполняться вне контекста транзакций.
Это означает, что транзакции не будут начинаться автоматически, и операции с базой данных не будут обернуты в транзакцию.

Это может привести к следующим последствиям:

1) Отсутствие автоматического управления транзакциями:
Операции с базой данных будут выполняться сразу, без возможности отката в случае ошибки. Это означает, что если произойдет ошибка в середине серии операций, уже выполненные операции не будут отменены.
2) Отсутствие атомарности:
Операции не будут атомарными, то есть последовательность операций не будет выполняться как единое целое. Если одна из операций не удалась, все остальные операции все равно будут зафиксированы в базе данных.
3) Проблемы с согласованностью данных:
Возможны проблемы с согласованностью данных. Например, если одна операция изменяет состояние данных, а следующая операция зависит от этого состояния, может возникнуть ситуация, когда база данных находится в непредсказуемом или неконсистентном состоянии.
4) Нет контроля над изоляцией транзакций:
Без транзакций невозможно контролировать уровень изоляции, что может привести к таким проблемам, как грязное чтение, неповторяющееся чтение и фантомное чтение.